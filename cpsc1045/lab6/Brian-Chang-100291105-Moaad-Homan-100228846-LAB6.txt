PART I
a) An event in JavaScript is basically anything that the user does, whether it be a mouseclick, a keyboard input, or a mouse movement. It can also include events that happen on the browser level, such as window loaded, tab closed, imaged loaded etc.
b) An HTML node is an HTML element.
c) A handler is used to handle actions that the programmer might want to program to take upon reception of certain events, like the ones mentioned in (a).
d) Mouse click, mouse down, mouse up, mouse move.
e) The load event is used to signal to JavaScript that the element has loaded.
f) "click"
g) Event.which indicates what events had occured displaying on the log 
h) The event object is the event itself. If a function receives the event object, it can then get values such as keycode values from the object, thus determining the next course of action.
i) onkeypress(); onkeydown(); onkeyup();
j) Event propagation relates an event to multiple elements or vice versa
k) a scroll event is useful in its function to load more elements and objects on to the page as you scroll down, for example (instagram)
l) A bug is an error in the code that causes it to produce an unexpected result. 
m) use debugger; it shows you each code at an individual level
n) Assertion statement catch logical errors. Setting an assertion upon a condition must be true according to the program.  Basically an assertions maintains a program to run according to how it was meant to be run, or how it was programmed based on condition. Assert (criteria <= 0); in this case if criteria is 0 or less the program will not execute. 
o) event.keyCode(65);
p) It is a key or a combination on a computer keyboard that modifies the default action of the assigned key when combined or etc. example(ctrl + shift)
r) in the beggining of the script if you want the script to load onto the page use: function = window.onload() 


PART II
a)  var canvas = document.getElementById("canvas").addEventListener("mousemove", function() {
        console.log("Mouse moved");
    });

b)  document.addEventListener("keydown", function(event) {
        if(event.ctrlKey && event.keyCode == 76) {
            console.log("Ctrl-L pressed");
        }
    });

c)  var button2 = getElementById("button2");
    button2.addEventListener("click", button2Pressed);
    button2.removeEventListener("click", button2Pressed);
    function button2Pressed() {
        console.log("button 2 disabled");
    }

PART III
a) The paragraph, div, body, and HTML handlers were all triggered.
b) The button, paragraph, div, body, and HTML handlers were all triggered.
c) Although the text and the button are both in the same paragraph, the button triggered one more handler because the button itself has a handler. If the text was in a span, and the span had a handler, they will have the same amount of triggered events.
d) The canvas, div, body, and HTML handlers were triggered.
e) The div, body, and HTML handlers were triggered.
f) This means that the canvas and the header are in the same div, same body, and obviously the same HTML document, but the canvas has its own event handler that will only be activated if one clicks on the canvas.
g) The div, body, and HTML handlers were triggered.
h) The region above and below the large box are beyond the body tag's jurisdiction. These places are where one must click to get on the HTML handler to trigger.

PART IV
a) An example of an Array would be (var array = ["example",3,4,5];) and it is a global object that is accessed by calling the array[0]; with the order assigned to it
b) we access an element by calling the array name as such array[0]; this will have us access "example" as its ordered at 0
c) array[6].push(-5);    //not sure about this but it sounds logical
d)  var array = [1,2,"line"]
    array[3] = "string";
    console.log(array); // returns [1,2,"line","string"]
e) array.remove(-2,-1)
f) array.splice(1,3);
g) array.push(n)
h) when a string is immutable, concat() returns a concatenated, string.
i) var array = {};
j) booleans, strings, integers, objects
k) yes an array can hold any of the javascript data type inputs
l) for loop 

PART V
a) dogeer
b) girls[0]+girls[1]+boys[0]+boys[1]+boys[2] (didn't add the code for spaces)
c) No it will not be able to execute. We will run into an index out of bounds error because the size of arr is 2, and the for loop starts at 2. arr[2] is already out of bounds, nevermind the 3 and 4 after.
d) sum = 270 when the loop terminates.
    for(var index = 0; index < arr.length; index++) {
        sum += arr[i];
    }
e) 9.0
   mi = 1, m = 9.0

PART VI
function sumArray(array1[][], arrSize) {
    var sum = 0;
    for(var row = 0; row < arrSize; row++) {
        for(var col = 0; col < arrSize; col++) {
            sum += array1[row][col];
        }
    }
    return sum;
}
