OUTPUT OF java Lab9
Key: the        Comparisons
Num. words      Linear (unstd.) Linear (std.)   Binary (std.)
--------------- --------------- --------------- ---------------
10              9               11              6
12              12              12              6
14              14              14              6
14              11              12              4
24              4               22              6
63              10              46              10
588             5               472             8

Key: a          Comparisons
Num. words      Linear (unstd.) Linear (std.)   Binary (std.)
--------------- --------------- --------------- ---------------
10              10              10              4
12              6               7               2
14              14              14              6
14              4               4               4
24              23              3               8
63              63              63              10
588             21              74              6

Key: was        Comparisons
Num. words      Linear (unstd.) Linear (std.)   Binary (std.)
--------------- --------------- --------------- ---------------
10              10              10              6
12              5               12              6
14              14              14              6
14              3               14              6
24              22              25              8
63              21              57              6
588             73              551             8

ANSWERS FOR QUESTIONS:
a) It depends. If the target object we're looking for is considered very large in the list, then linear search works more efficiently if the list is unsorted. This way, the second
   linear search finds the index where that large item is stored, it can return the index to the calling function immediately. If the list is sorted though, it must cycle through all the items until it finds that large element.
   At the same time, if the item we're searching for is considered very small in the list, linear search may work better if the list is sorted, for similar reasons to the above.

b) Binary search doesn't work on an unsorted list because of the way it works. If the middle element is smaller or greater than the target, the search algorithm will chop half of the list off. This is a problem when the list is unsorted because, what if the target element is in the side that was chopped off? The algorithm will then never be able to find it.

c) The number of comparisons of linear search grows much faster than binary because of reasons I illustrated in part a. Binary search just needs to chop half of the list off each time, and is therefore much faster when it comes to large databases.

d) If the key is not in the array, linear search will have to compare every single element, so it will have to make array.length comparisons. For the same result, binary search will perform about 10 comparisons.

e)
    i. If I was to just go through the array once, I would not bother spending extra time with sorting the array, then using binary search. I would just use linear and find my target element.

    ii. If I had to go through it 50,000 times, then the time cost of sorting the array first then using binary search makes much more sense. I would use binary search and find my target element after sorting the array.
